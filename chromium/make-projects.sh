#!/bin/sh

# This script takes output from a Chromium WebLayer build and constructs a set
# of gradle library projects that can be used as dependencies by another gradle
# project. The result enables the WebLayer implementation, which was designed to
# live as part of either the WebLayerSupport APK or the system WebView APK, to
# instead be linked into an application APK.
#
# The Chromium build output is stored in a directory indicated by $release_dir
# below and consists of WebLayerSupport.apk and two zip files, one containing
# all JARs matching the pattern `*.processed.jar` and the other containing all
# ZIP files matching the pattern `*.resources.zip`. These are found in the
# Chromium build output directory.
#
# The JAR files contain all of the compiled class files from the WebLayer build,
# and the ZIP files contain all of the accumulated resource files. The JAR files
# can easily just be included in our library project. The resource files require
# more work to handle.
#
# Chromium is made up of many library targets, and a subset of those may define
# their own resources. As part of that, those libraries also define R classes
# used to identify their resources in the code. The Chromium build has a way of
# packaging all of these up into a global set of resources when building an APK.
#
# The compiled code in the JAR files assumes it can access the R classes, but
# we cannot include those generated R classes into our library as the values
# assigned to the resources will not match up with those assigned when gradle
# packages the resources into our APK.
#
# Rather than try to replicate this part of the Chromium build process outside
# of the Chromium repo, we take the approach of letting gradle generate all of
# the R classes needed by Chromium. This means we need to have gradle projects
# for each of those Chromium libraries. Again this is a subset of the total
# set of JAR files.
#
# This script mostly exists to deal with the need to construct so many projects
# to support packaging up resources properly and generating those R classes for
# Chromium.
#
# The strategy to determine the set of projects needed is to look at the set of
# R classes generated by the Chromium build system and then just generate a
# resource-only project from a template for each of those. This way gradle will
# produce the necessary R classes and everything will just work. We also need
# take care to special case a few of them, org.chromium.ui and a few others.
#
# Another challenge is that Chromium R classes assume they can be used to access
# not just the resources defined by a library but also the set of resources
# defined by the dependencies of that library. Fortunately, the dependencies are
# not too complex to replicate, so we just do that manually. We make all
# resource projects depend on org.chromium.ui as well as a few androidx modules.
#
# Finally, we have a top-level "weblayer support" target that we use as the tip
# of the iceberg. This is what the app can depend on to pull in all of WebLayer,
# and it has all of the resource projects as its dependencies. It is also the
# library project that includes all of the JAR files, assets and native libs.
#
# Whew.

### Constants ###

script_name=$(basename $0)
release_dir=${1:-"release-96"}
unpacked_dir=".unpacked"
gen_dir="gen"


### Functions ###

unpack() {
    echo "Unpacking $1"
    dest_dir=$unpacked_dir/$(echo $1 | cut -d'.' -f1)
    mkdir -p $dest_dir
    unzip -q $release_dir/$1 -d $dest_dir
}

unpack_all() {
    mkdir -p $unpacked_dir
    unpack WebLayerSupport.apk
    unpack jars.zip
    unpack resources.zip
}

tempfile() {
    mktemp /tmp/$script_name.XXXXXX
}

expand_macro_inline_with_string() {
    file=$1
    macro=$2
    string=$3
    temp=$(tempfile)
    cat $file | sed 's|%'$macro'%|'$string'|g' > $temp
    mv -f $temp $file
}

expand_macro_with_file_contents() {
    file=$1
    macro=$2
    replacement_file=$3
    temp=$(tempfile)
    awk '$0=="%'$macro'%" { system("cat '$replacement_file'"); next }; {print}' $file > $temp
    mv -f $temp $file
}

make_list_of_jars() {
    # Exclude jars here
    exclude_pattern='third_party/android|junit|espresso|ub-uiautomator|weblayer/(shell|public|browser.*interfaces)'

    list=$(find $unpacked_dir/jars/obj -name \*.jar | \
        egrep -v $exclude_pattern | \
        # Skip duplicates.
        fgrep -v "third_party/blink/public/mojom/frame/frame_java.processed.jar" | \
        fgrep -v "third_party/blink/public/mojom/dom_storage/dom_storage_java.processed.jar")

    # Include these back
    list="$list $unpacked_dir/jars/obj/third_party/android_deps/chromium_play_services_availability_java.processed.jar"

    echo $list
}

make_weblayer_support_proj() {
    echo "Creating project files for org.chromium.weblayer.support"

    cp -r templates/org__chromium__weblayer__support $gen_dir
    target_dir=$gen_dir/org__chromium__weblayer__support

    # link assets
    ln -s "../../../../$unpacked_dir/WebLayerSupport/assets" $target_dir/src/main/assets

    # link native code
    ln -s "../../../../$unpacked_dir/WebLayerSupport/lib" $target_dir/src/main/jniLibs

    list_of_jars=$(make_list_of_jars)

    mkdir -p $target_dir/libs

    flatnames=""
    for jar in $list_of_jars; do
        filename=$(basename $jar)
        flatname=$(echo $jar | cut -d'/' -f4- | sed 's/\//__/g')
        flatnames="$flatnames libs/$flatname"
        ln -s ../../../$jar $target_dir/libs/$flatname
    done

    # Exclude R*.class files from weblayer_support_apk.processed.jar, but use the rest
    weblayer_support_apk_jar="weblayer__shell__android__weblayer_support_apk.trimmed.jar"
    cp $unpacked_dir/jars/obj/weblayer/shell/android/weblayer_support_apk.processed.jar \
        $target_dir/libs/$weblayer_support_apk_jar
    zip -q -d $target_dir/libs/$weblayer_support_apk_jar '*/R*class'
    flatnames="$flatnames libs/$weblayer_support_apk_jar"

    impl_lines=$(tempfile)
    for flatjar in $flatnames; do
        echo "    implementation files('$flatjar')" >> $impl_lines
    done
    expand_macro_with_file_contents $gen_dir/org__chromium__weblayer__support/build.gradle JARS $impl_lines
    rm $impl_lines

    deps_lines=$(tempfile)
    for dep in $(echo "$*"); do
        echo "    implementation project(path: ':chromium:gen:"$dep"')" >> $deps_lines
    done
    expand_macro_with_file_contents $gen_dir/org__chromium__weblayer__support/build.gradle DEPS $deps_lines
    rm $deps_lines
}

get_list_of_R_classes() {
    zipinfo -1 $unpacked_dir/jars/obj/weblayer/shell/android/weblayer_support_apk.processed.jar | \
        grep '^org.*\/R.class' | egrep -v 'test'
}

get_list_of_standard_R_classes() {
    get_list_of_R_classes | egrep -v 'org.chromium.(base|weblayer|ui)'
}

get_resource_zips_for_package() {
    path=$1
    subpath=$(echo $path | cut -d'/' -f3-)
    if [ $subpath = "third_party/android/media" ]; then
        subpath="third_party/android_media"  # sigh
    elif [ $subpath = "weblayer_private" ]; then
        subpath="weblayer/browser/java"
    fi
    srcdir=$unpacked_dir/resources/obj/$subpath
    if [ -e $srcdir ]; then
        find $unpacked_dir/resources/obj/$subpath -name \*.zip | grep -v "test"
    fi
}

make_standard_resource_proj() {
    R=$1
    shift
    deps="$*"
    path=$(dirname $R)
    package_name=$(echo $path | sed 's|/|\.|g')
    project_name=$(echo $path | sed 's|/|__|g')

    echo "Creating project files for $package_name"

    target_dir=$gen_dir/$project_name
    cp -r templates/standard_resource_proj $target_dir

    expand_macro_inline_with_string $target_dir/src/main/AndroidManifest.xml PACKAGE_NAME $package_name

    resource_dirs=""
    zips=$(get_resource_zips_for_package $path)
    for zip in $(echo $zips); do
        if [ "$(zipinfo -1 $zip)" = "Empty zipfile." ]; then
            continue
        fi
        subpath=$(echo $path | cut -d'/' -f3-)
        srcdir=$unpacked_dir/resources/obj/$subpath
        outdir=$(echo $zip | sed 's|'$srcdir'||g' | cut -d'/' -f2- | cut -d'.' -f1 | sed 's|/|__|g')
        outpath=$target_dir/src/main/res/$outdir

        #echo "Unzipping $zip ..."

        mkdir -p $outpath
        unzip -q $zip -d $outpath

        subdirs=$(find $outpath -mindepth 1 -name '*_res*' -type d)
        if [ -n "$subdirs" ]; then
            for dir in $(echo $subdirs); do
                trimmed_dir=$(echo $dir | cut -d'/' -f3-)
                resource_dirs="$resource_dirs $trimmed_dir"
            done
        else
            resource_dirs="$resource_dirs src/main/res/$outdir"
        fi
    done

    res_paths=$(tempfile)
    for resdir in $(echo $resource_dirs); do
        echo '            "'$resdir'",' >> $res_paths
    done
    expand_macro_with_file_contents $target_dir/build.gradle RESOURCE_DIRS $res_paths
    rm $res_paths

    deps_lines=$(tempfile)
    for dep in $(echo "$deps"); do
        echo "    implementation project(path: ':chromium:gen:"$dep"')" >> $deps_lines
    done
    expand_macro_with_file_contents $target_dir/build.gradle DEPS $deps_lines
    rm $deps_lines
}

make_standard_resource_projs() {
    for R in $(echo "$*"); do
        make_standard_resource_proj \
            $R \
            "org__chromium__ui" \
            "org__chromium__components__strings" \
            "org__chromium__components__browser_ui__strings"
    done
}

make_weblayer_private_resource_proj() {
    make_standard_resource_proj \
        "org/chromium/weblayer_private/R.class" \
        "org__chromium__ui" \
        "org__chromium__components__strings" \
        "org__chromium__components__browser_ui__strings"
}

make_ui_resource_proj() {
    make_standard_resource_proj "org/chromium/ui/R.class"
}

make_strings_resource_projs() {
    make_standard_resource_proj "org/chromium/components/strings/R.class"
    make_standard_resource_proj "org/chromium/components/browser_ui/strings/R.class"
}

### Execution ###

rm -fr $unpacked_dir
rm -fr $gen_dir

unpack_all

mkdir -p $gen_dir

standard_R_classes=$(get_list_of_standard_R_classes)

make_ui_resource_proj
make_strings_resource_projs
make_standard_resource_projs $standard_R_classes
make_weblayer_private_resource_proj

dependencies="org__chromium__weblayer_private"
for R in $(echo $standard_R_classes); do
    path=$(dirname $R)
    project_name=$(echo $path | sed 's|/|__|g')
    dependencies="$dependencies $project_name"
done

make_weblayer_support_proj $dependencies

echo "Done"
