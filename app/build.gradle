plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
    id 'com.apollographql.apollo3' version "$apollo_version"
    id 'org.jlleitschuh.gradle.ktlint' version "$ktlint_version"
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.neeva.app"
        minSdk 28
        targetSdk 30
        versionCode 27
        versionName "0.0.27"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kapt {
        arguments {
            // Allow Room to output database schemas for every version to make it possible to
            // migrate from one to the next more easily.
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = [
            '-Xopt-in=kotlin.RequiresOptIn'     // Needed for the experimental Compose functions
        ]
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    apollo {
        generateKotlinModels.set(true)
        packageName.set("com.neeva.app")
    }

    // Ignore a bunch of files with the same that libraries may include but are completely useless
    // for the APK.
    packagingOptions {
        resources {
            excludes += [
                'META-INF/AL2.0',
                'META-INF/LGPL2.1',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/NOTICE'
            ]
        }
    }

    // Chromium expects to be able to mmap these assets.
    androidResources {
        noCompress 'dat', 'bin', 'pak'
    }

    sourceSets {
        findByName("main")?.java?.srcDirs(project.file("src/main/kotlin"))

        // Allow the instrumentation tests to get access to the Room DB schemas.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    testOptions {
        // Make sure that the unit tests can get access to whatever resources they need.
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation project(path: ':weblayer')
    implementation project(path: ':chromium:gen:org__chromium__weblayer__support')

    // region https://github.com/neevaco/neeva-android/issues/54
    // Pulling this dependency in allows us to define the constant @integer/google_play_services_version
    // in our Android Manifest.  We use the GMS version that matches the value we used when building
    // the WebLayerSupport APK, which was version 17.0.0.
    implementation "com.google.android.gms:play-services-base:$play_services_version"
    // endregion

    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.browser:browser:1.4.0'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material3:material3:1.0.0-alpha04"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.navigation:navigation-compose:$navigation_compose_version"
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha03'
    implementation "com.apollographql.apollo3:apollo-runtime:$apollo_version"
    implementation 'com.google.accompanist:accompanist-navigation-animation:0.24.1-alpha'
    implementation 'com.google.android.material:material:1.5.0'
    implementation "io.coil-kt:coil-compose:$coil_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.6'
    testImplementation "io.strikt:strikt-core:$strikt_version"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"

    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    androidTestImplementation "io.strikt:strikt-core:$strikt_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Hilt
    kapt "com.google.dagger:hilt-compiler:$dagger_version"
    implementation "com.google.dagger:hilt-android:$dagger_version"

    kaptTest "com.google.dagger:hilt-compiler:$dagger_version"
    testImplementation "com.google.dagger:hilt-android-testing:$dagger_version"

    kaptAndroidTest "com.google.dagger:hilt-compiler:$dagger_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$dagger_version"

    // Room
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-paging:$room_version"

    testImplementation "androidx.room:room-testing:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"
    implementation "androidx.paging:paging-compose:1.0.0-alpha14"
}

hilt {
    enableAggregatingTask = true
}

kapt {
    correctErrorTypes true
}

// Output the status of test runners to the log.
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

// Set up ktlint.
ktlint {
    android.set(true)
    outputColorName.set("RED")
}
