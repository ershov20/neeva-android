plugins {
    id 'com.android.application'
    id('org.jetbrains.kotlin.android').version("1.5.21")
    id("com.apollographql.apollo").version("2.5.5")
}

android {
    compileSdk 30
    buildToolsVersion "30.0.3"

    apply plugin: 'kotlin-kapt'

    defaultConfig {
        applicationId "com.neeva.app"
        minSdk 28
        targetSdk 30
        versionCode 11
        versionName "0.0.11"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    apollo {
        generateKotlinModels.set(true)
    }

    // Ignore a bunch of files with the same that libraries may include but are completely useless
    // for the APK.
    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
}

dependencies {
    implementation project(path: ':weblayer')

    // https://github.com/neevaco/neeva-android/issues/54:
    // Pulling this dependency in allows us to define the constant @integer/google_play_services_version
    // in our Android Manifest.  We use the GMS version that matches the value we used when building
    // the WebLayerSupport APK, which was version 17.0.0.
    implementation "com.google.android.gms:play-services-base:$play_services_version"

    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha03'
    implementation 'com.apollographql.apollo:apollo-runtime:2.5.5'
    implementation 'com.apollographql.apollo:apollo-coroutines-support:2.5.5'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "io.coil-kt:coil-compose:1.3.0"

    testImplementation 'junit:junit:4.+'
    testImplementation 'org.robolectric:robolectric:4.6'
    testImplementation "io.strikt:strikt-core:$strikt_version"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt("androidx.room:room-compiler:$room_version")
    implementation "androidx.room:room-ktx:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}