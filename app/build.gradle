plugins {
    id 'com.android.application'
    id 'com.apollographql.apollo3' version "$apollo_version"
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.android'
    id 'org.jlleitschuh.gradle.ktlint' version "$ktlint_version"
}

android {
    compileSdk target_sdk_version

    defaultConfig {
        namespace "com.neeva.app"
        applicationId "com.neeva.app"
        testApplicationId "com.neeva.app.test"

        minSdk min_sdk_version
        targetSdk target_sdk_version
        versionCode 1600
        versionName "0.90.0"

        manifestPlaceholders = [isolatedSplits: true]

        vectorDrawables {
            useSupportLibrary true
        }

        testInstrumentationRunner "com.neeva.app.NeevaTestRunner"

        // Make the Android Test Orchestrator clear the app's state between test runs to avoid
        // having tests interfere with each other.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        testOptions {
            // If using the orchestrator, you MUST include the androidTestUtil line that
            // declares it as a dependency.
            execution 'ANDROIDX_TEST_ORCHESTRATOR'

            // Make sure that the unit tests can get access to whatever resources they need.
            unitTests {
                includeAndroidResources = true
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                    "room.schemaLocation": "$projectDir/schemas".toString(),
                    "room.incremental": "true"
                ]
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'

            // Disable in debug mode to avoid interfering with instrumentation tests, which
            // depend on inserting a split that cannot be isolated (in API 28 at least).
            manifestPlaceholders = [isolatedSplits: false]
        }

        release {
            minifyEnabled true
            shrinkResources false  // TODO(darin): figure out how to re-enable this
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        staging {
            initWith release
            applicationIdSuffix '.staging'
            versionNameSuffix '-STAGING'
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release', 'debug']
        }
    }

    kapt {
        arguments {
            // Allow Room to output database schemas for every version to make it possible to
            // migrate from one to the next more easily.
            arg("room.schemaLocation", "$projectDir/schemas")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = [
            // Needed for the experimental features that use the @OptIn annotation
            '-opt-in=kotlin.RequiresOptIn'
        ]
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion androidx_compose_version
    }

    apollo {
        generateKotlinModels.set(true)
        packageName.set("com.neeva.app")
    }

    // Ignore a bunch of files with the same name that libraries may include but are completely
    // useless for the APK.
    packagingOptions {
        resources {
            excludes += [
                'META-INF/AL2.0',
                'META-INF/LGPL2.1',
                'META-INF/LICENSE',
                'META-INF/LICENSE.txt',
                'META-INF/NOTICE'
            ]
        }
    }

    // Chromium expects to be able to mmap these assets.
    androidResources {
        noCompress 'dat', 'bin', 'pak', 'proto'
    }

    sourceSets {
        findByName("main")?.java?.srcDirs(project.file("src/main/kotlin"))

        androidTest {
            // Allow the instrumentation tests to get access to the Room DB schemas.
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }
    dynamicFeatures = [':weblayer_support']

    lintOptions {
        disable 'MissingQuantity'
    }
}

tasks.preBuild.dependsOn ":scripts:buildScripts"

dependencies {
    implementation project(path: ':weblayer')
    testImplementation project(path: ':testCommon')
    androidTestImplementation project(path: ':testCommon')

    implementation "androidx.activity:activity-compose:$androidx_activity_version"
    implementation "androidx.activity:activity-ktx:$androidx_activity_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation 'androidx.browser:browser:1.4.0'
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.compose.animation:animation:$androidx_compose_version"
    implementation "androidx.compose.material:material:$androidx_compose_version"
    implementation "androidx.compose.material:material-icons-extended:$androidx_compose_version"
    implementation "androidx.compose.material3:material3:1.0.0-beta03"
    implementation "androidx.compose.ui:ui:$androidx_compose_version"
    implementation "androidx.compose.ui:ui-tooling:$androidx_compose_version"
    implementation "androidx.compose.runtime:runtime:$androidx_compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$androidx_compose_version"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_version"
    implementation "androidx.navigation:navigation-compose:$androidx_navigation_compose_version"
    implementation 'androidx.security:security-crypto-ktx:1.1.0-alpha03'
    implementation "androidx.preference:preference-ktx:$androidx_preference_version"
    implementation 'androidx.window:window:1.0.0'
    implementation "androidx.work:work-runtime-ktx:2.7.1"
    implementation "com.apollographql.apollo3:apollo-runtime:$apollo_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"
    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    implementation "com.android.installreferrer:installreferrer:2.2"
    implementation "com.google.android.material:material:$google_android_material_version"
    implementation "com.google.android.gms:play-services-auth:$play_services_auth_version"
    implementation "com.google.android.gms:play-services-base:$play_services_version"
    implementation "com.google.android.gms:play-services-oss-licenses:17.0.0"
    implementation 'com.google.android.play:core-ktx:1.8.1'
    implementation "io.coil-kt:coil-compose:$coil_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    // TODO(darin): Re-enable upon resolving incompatibility with WebLayerSupport.apk.
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    testImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    testImplementation "androidx.test.ext:junit-ktx:$androidx_test_junit_version"
    testImplementation 'androidx.work:work-testing:2.7.1'
    testImplementation "com.apollographql.apollo3:apollo-testing-support:$apollo_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.10.0"
    testImplementation "io.mockk:mockk:1.12.4"
    testImplementation "io.strikt:strikt-core:$strikt_version"
    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    testImplementation 'org.robolectric:robolectric:4.9-alpha-1'
    testImplementation 'org.yaml:snakeyaml:1.28'

    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation "com.apollographql.apollo3:apollo-testing-support:$apollo_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    androidTestImplementation "io.strikt:strikt-core:$strikt_version"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidx_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_test_espresso_version"
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$androidx_compose_version"
    androidTestUtil 'androidx.test:orchestrator:1.4.1'

    // Compose instrumentation testing requires we add the dependency to debugImplementation so that
    // the tests can start a ComponentActivity without crashing.
    debugImplementation "androidx.compose.ui:ui-test-manifest:$androidx_compose_version"

    // Hilt
    kapt "com.google.dagger:hilt-compiler:$dagger_version"
    implementation "com.google.dagger:hilt-android:$dagger_version"

    kaptTest "com.google.dagger:hilt-compiler:$dagger_version"
    testImplementation "com.google.dagger:hilt-android-testing:$dagger_version"

    kaptAndroidTest "com.google.dagger:hilt-compiler:$dagger_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$dagger_version"

    // Moshi
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.moshi:moshi:$moshi_version"

    // Room
    annotationProcessor "androidx.room:room-compiler:$androidx_room_version"
    kapt "androidx.room:room-compiler:$androidx_room_version"

    implementation "androidx.room:room-runtime:$androidx_room_version"
    implementation "androidx.room:room-ktx:$androidx_room_version"
    implementation "androidx.room:room-paging:$androidx_room_version"

    testImplementation "androidx.room:room-testing:$androidx_room_version"
    androidTestImplementation "androidx.room:room-testing:$androidx_room_version"

    // Paging
    implementation "androidx.paging:paging-compose:1.0.0-alpha16"
    implementation "androidx.paging:paging-runtime-ktx:$androidx_paging_version"
    testImplementation "androidx.paging:paging-common-ktx:$androidx_paging_version"
}

hilt {
    enableAggregatingTask = true
}

kapt {
    correctErrorTypes true
}

// Set up ktlint.
ktlint {
    android.set(true)
    outputColorName.set("RED")
}
